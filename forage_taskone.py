# -*- coding: utf-8 -*-
"""Forage-TaskOne.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L2wMsNIzeZmCtsyeYNbFN5_IlnPrt2m5
"""

#Create a line graph
import matplotlib.pyplot as plt
import pandas as pd

data = pd.read_csv("Nat_Gas.csv")
data["Dates"] = pd.to_datetime(data["Dates"], format="mixed")
plt.figure(figsize=(15, 5))
plt.plot(data["Dates"], data["Prices"])
plt.xlabel("Dates")
plt.ylabel("Prices")
plt.xticks(rotation=45)
plt.title("Monthly Prices of Natural Gas")
plt.show()

"""Natural gas prices have been consistently high in winter months (December-February) and low in summer months (May-September), which is due to demand for natural gas in these months. During the winter, there is higher demand for gas used for space heater, while in summer, there is lower demand due to consumers switching to use air-conditioner. In addition, the past 4 years has shown a gradual increase of the prices over each year. Thus, we are expecting the same patterns of natural gas prices to continue throughout the upcoming years."""

#Create function to predict future prices using past time series data
from datetime import datetime
import numpy as np
from prophet import Prophet
full_data=pd.read_csv("Nat_Gas.csv")
full_data.columns=['ds','y']
full_data["ds"] = pd.to_datetime(full_data["ds"], format="mixed")
m=Prophet()
m.fit(full_data)
future = m.make_future_dataframe(periods=12*4, freq='M')
forecast = m.predict(future)


#Create function to interpolate the prices for dates in the middle of the months
def interpolate(date, data):
    data["Dates"]=data["Dates"].dt.strftime("%Y%m%d")
    data["Dates"]=data['Dates'].astype(int)
    past_date = int(date.strftime("%Y%m%d"))
    output = np.interp(past_date, data["Dates"], data["Prices"])
    data["Dates"]=pd.to_datetime(data["Dates"], format="%Y%m%d")
    return output

#Create function to interpolate the future one year price if it is in the timeframe of the dataset or estimate if it is not
def predict(date):
    future_date = date.replace(year=date.year + 1)
    if future_date < full_data["ds"].max():
        return interpolate(future_date, data)
    else:
        forecast.rename(columns={"ds":"Dates", "yhat":"Prices"}, inplace=True)
        return interpolate(future_date, forecast)

#Main function to take a date as input and return a price estimate for that date and one year in the future
def price_estimate(str):
    date = datetime.strptime(str, "%m/%d/%y")
    past_price = interpolate(date, data)
    future_price = predict(date)
    print("The estimate of the natural gas price on ", str, " is ", past_price)
    print("The estimate of the natural gas price one year later is ", future_price)
    forecast["Dates"]=pd.to_datetime(forecast["Dates"], format="%m/%d/%Y")
    return past_price, future_price

#Testing the function
price_estimate("01/15/24")
plt.plot(forecast['Dates'], forecast['Prices'])